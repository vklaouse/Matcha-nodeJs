#!/usr/bin/env node

/**
 * Module dependencies.
 */

let appli = require('../app');
let app = appli.app;
let session = appli.session;
let db = appli.db;
let debug = require('debug')('matcha:server');
let http = require('http');
let sharedsession = require("express-socket.io-session");

/**
 * Get port from environment and store in Express.
 */

let port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

let server = http.createServer(app);

/**
 * Create web socket.
 */

let io = require('socket.io')(server);

io.use(sharedsession(session, {
	autoSave:true
}));

var membersId = {};
io.sockets.on('connection', (socket) => {
	if (socket.handshake.session.uId)
		membersId[socket.handshake.session.uId] = socket.id;

	socket.on('tchat', function(data){
		var query = `INSERT INTO messages (send_by, received_by, content)
			VALUES($(send_by), $(received_by), $(content))`;
		if (membersId[data.id]) {
			io.to(membersId[data.id]).emit('send_msg', {msg: data.text, id: socket.handshake.session.uId });
		}
		db.none(query, {send_by: socket.handshake.session.uId, 
				received_by: data.id, content: data.text});
	});

	socket.on('disconnect', function() {
		console.log('Bye ', socket.id);
	});

	// socket.broadcast.emit(``, ``);
	// socket.on(``, ``);

});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	var port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	var bind = typeof port === 'string'
		? 'Pipe ' + port
		: 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
		break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
		break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	var addr = server.address();
	var bind = typeof addr === 'string'
		? 'pipe ' + addr
		: 'port ' + addr.port;
	debug('Listening on ' + bind);
}

#!/usr/bin/env node

/**
 * Module dependencies.
 */

let appli = require('../app');
let app = appli.app;
let session = appli.session;
let db = appli.db;
let xssFilters = appli.xssFilters;
let debug = require('debug')('matcha:server');
let http = require('http');
let sharedsession = require("express-socket.io-session");

/**
 * Get port from environment and store in Express.
 */

let port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

let server = http.createServer(app);

/**
 * Create web socket.
 */

let io = require('socket.io')(server);

io.use(sharedsession(session, {
	autoSave:true
}));

var membersId = {};
io.sockets.on('connection', (socket) => {
	if (socket.handshake.session.uId)
		membersId[socket.handshake.session.uId] = socket.id;

	socket.on('co', function(data){
		var query = `SELECT last_log FROM users WHERE id=$(id)`;
		if (membersId[data.id])
			socket.emit('isCo');
		else
			db.one(query, data)
			.then((data) => {
				socket.emit('isntCo', data);
			}).catch((err) => {});
	});

	socket.on('tchat', function(data){
		var query = `INSERT INTO messages (send_by, received_by, content)
			VALUES($(send_by), $(received_by), $(content))`;
		var text = xssFilters.inHTMLData(data.text);
		if (membersId[data.id]) {
			io.to(membersId[data.id]).emit('send_msg', {msg: text, id: socket.handshake.session.uId });
		}
		db.none(query, {send_by: socket.handshake.session.uId, 
				received_by: data.id, content: text});
	});

	socket.on('like', function(data) {
		if (data.id == socket.handshake.session.uId)
			return ;
		var query = `SELECT * FROM likes WHERE user_id=$(id) AND like_for=$(my_id)`;
		var resp = {id: data.id, my_id: socket.handshake.session.uId};
		
		db.one(query, resp)
		.then((res) => {
			resp = {to_id: data.id, from_id: socket.handshake.session.uId,
					content: "Vous venez d'etre like en retour"}
			query = `INSERT INTO notif (user_id, notif_from, content) 
				VALUES($(to_id), $(from_id), $(content))`;
			db.none(query, resp)
			.then(() => {
				io.to(membersId[resp.to_id]).emit('likeNotif', resp);
			}).catch((err) => {console.log(err)});

		}).catch((err) => {
			resp = {to_id: data.id, from_id: socket.handshake.session.uId,
					content: "Vous venez d'etre like"}
			query = `INSERT INTO notif (user_id, notif_from, content) 
				VALUES($(to_id), $(from_id), $(content))`;
			db.none(query, resp)
			.then(() => {
				io.to(membersId[resp.to_id]).emit('likeNotif', resp);
			}).catch((err) => {console.log(err)});
		});
			
	});

	socket.on('unlike', function(data) {
		if (data.id == socket.handshake.session.uId)
			return ;
		var resp = {to_id: data.id, from_id: socket.handshake.session.uId,
				content: "Vous venez d'etre unlike"}
		var query = `INSERT INTO notif (user_id, notif_from, content) 
			VALUES($(to_id), $(from_id), $(content))`;
		db.none(query, resp)
		.then(() => {
			io.to(membersId[resp.to_id]).emit('unlikeNotif', resp);
		}).catch((err) => {console.log(err)});
	});

	socket.on('watch', function(data) {
		if (data.id == socket.handshake.session.uId)
			return ;
		var resp = {to_id: data.id, from_id: socket.handshake.session.uId,
				content: "Votre profil vient d'être consulté"}
		var query = `INSERT INTO notif (user_id, notif_from, content) 
			VALUES($(to_id), $(from_id), $(content))`;
		db.none(query, resp)
		.then(() => {
			io.to(membersId[resp.to_id]).emit('watchNotif', resp);
		}).catch((err) => {console.log(err)});
	});

	socket.on('message', function(data) {
		if (data.id == socket.handshake.session.uId)
			return ;
		var resp = {to_id: data.id, from_id: socket.handshake.session.uId,
				content: "Votre venez de recevoir un message"}
		var query = `INSERT INTO notif (user_id, notif_from, content) 
			VALUES($(to_id), $(from_id), $(content))`;
		db.none(query, resp)
		.then(() => {
			io.to(membersId[resp.to_id]).emit('messageNotif', resp);
		}).catch((err) => {console.log(err)});
	});

	socket.on('deco', function() {
		delete membersId[socket.handshake.session.uId];
	});

	socket.on('disconnect', function() {
		delete membersId[socket.handshake.session.uId];
	});
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	var port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	var bind = typeof port === 'string'
		? 'Pipe ' + port
		: 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
		break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
		break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	var addr = server.address();
	var bind = typeof addr === 'string'
		? 'pipe ' + addr
		: 'port ' + addr.port;
	debug('Listening on ' + bind);
}
